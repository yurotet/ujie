#!/bin/bash

#--------------------------------------------
# 功能：编译xcode项目并打ipa包
# 使用说明：
#		编译project
#			ipa-build <project directory> [-c <project configuration>] [-o <ipa output directory>] [-t <target name>] [-n]
#		编译workspace
#			ipa-build  <workspace directory> -w -s <schemeName> [-c <project configuration>] [-n]
#
# 参数说明：-c NAME				工程的configuration,默认为Release。
#			-o PATH				生成的ipa文件输出的文件夹（必须为已存在的文件路径）默认为工程根路径下的”build/ipa-build“文件夹中
#			-t NAME				需要编译的target的名称
#			-w					编译workspace	
#			-s NAME				对应workspace下需要编译的scheme
#			-n					编译前是否先clean工程
# 作者：ccf
# E-mail:ccf.developer@gmail.com
# 创建日期：2012/09/24
#--------------------------------------------
# 修改日期：2013/02/18
# 修改人：ccf
# 修改内容：打包方式改为使用xcrun命令，并修改第二个参数
#--------------------------------------------
# 修改日期：2013/04/25
# 修改人：ccf
# 修改内容：采用getopts来处理命令参数，并增加编译前清除选项
#--------------------------------------------
# 修改日期：2013/04/26
# 修改人：ccf
# 修改内容：增加编译workspace的功能
#--------------------------------------------

if [ $# -lt 1 ];then
	echo "Error! Should enter the root directory of xcode project after the ipa-build command."
	exit 2
fi

if [ ! -d $1 ];then
	echo "Error! The first param must be a directory."
	exit 2
fi

#工程绝对路径
cd $1
project_path=$(pwd)


#编译的configuration，默认为全编

build_configuration=ALL


param_pattern=":nc:o:t:ws:"
OPTIND=2
while getopts $param_pattern optname
  do
    case "$optname" in
	  "n")        
		should_clean=y		
        ;;
      "c")        
		tmp_optind=$OPTIND
		tmp_optname=$optname
		tmp_optarg=$OPTARG
		OPTIND=$OPTIND-1
		if getopts $param_pattern optname ;then
			echo  "Error argument value for option $tmp_optname"
			exit 2
		fi
		OPTIND=$tmp_optind

		build_configuration=$tmp_optarg
		
        ;;
      "o")
		tmp_optind=$OPTIND
		tmp_optname=$optname
		tmp_optarg=$OPTARG

		OPTIND=$OPTIND-1
		if getopts $param_pattern optname ;then
			echo  "Error argument value for option $tmp_optname"
			exit 2
		fi
		OPTIND=$tmp_optind

		cd $tmp_optarg
		output_path=$(pwd)
		if [ ! -d $output_path ];then
			echo "Error!The value of option o must be an exist directory."
			exit 2
		fi

        ;;
	  "w")
		workspace_name='*.xcworkspace'
		ls $project_path/$workspace_name &>/dev/null
		rtnValue=$?
		if [ $rtnValue = 0 ];then
			build_workspace=$(echo $(basename $project_path/$workspace_name))

		else
			echo  "Error!Current path is not a xcode workspace.Please check, or do not use -w option."
			exit 2
		fi
		
        ;;
	  "s")

		tmp_optind=$OPTIND
		tmp_optname=$optname
		tmp_optarg=$OPTARG

		OPTIND=$OPTIND-1
		if getopts $param_pattern optname ;then
			echo  "Error argument value for option $tmp_optname"
			exit 2
		fi
		OPTIND=$tmp_optind

		build_scheme=$tmp_optarg

        ;;
	  "t")
		tmp_optind=$OPTIND
		tmp_optname=$optname
		tmp_optarg=$OPTARG

		OPTIND=$OPTIND-1
		if getopts $param_pattern optname ;then
			echo  "Error argument value for option $tmp_optname"
			exit 2
		fi
		OPTIND=$tmp_optind

		build_target=$tmp_optarg
		
        ;;


      "?")
        echo "Error! Unknown option $OPTARG"
		exit 2
        ;;
      ":")
        echo "Error! No argument value for option $OPTARG"
		exit 2
        ;;
      *)
      # Should not occur
        echo "Error! Unknown error while processing options"
		exit 2
        ;;
    esac
  done

#build文件夹路径
build_path=${project_path}/build

#进入build路径
cd ${project_path}

if [ -d ./build ];then
	rm -rf build
fi
mkdir build

cd $build_path

#创建ipa-build文件夹
if [ -d ./ipa-build ];then
	rm -rf ipa-build
fi
mkdir ipa-build

build_config_array=(Debug Release)

build_configuration=$(echo $build_configuration | tr [a-z] [A-Z])

if [ $build_configuration = DEBUG ];then
	build_config_array=(Debug)
fi

if [ $build_configuration = RELEASE ];then
	build_config_array=(Release)
fi

for build_config in ${build_config_array[@]}
do

echo build_config is ${build_config}
#生成的app文件目录
appdirname=Release-iphoneos
if [ $build_config = Debug ];then
	appdirname=Debug-iphoneos
fi
if [ $build_config = Distribute ];then
	appdirname=Distribute-iphoneos
fi
#编译后文件路径(仅当编译workspace时才会用到)
compiled_path=${build_path}/${appdirname}

#是否clean
if [ "$should_clean" = "y" ];then
	xcodebuild clean
fi

#组合编译命令
build_cmd='xcodebuild'

prefix_path=${project_path}/config/${build_scheme}

echo 'prefixPath' ${prefix_path}

cd ${prefix_path}

declare -arr array


for xcconfig_file in `ls ${prefixPath}`

do


if [ -f ${prefix_path}/${xcconfig_file} ];then

if [ "${build_config}" = "Debug" ] && [ "${xcconfig_file:0-15}" = "_Debug.xcconfig" ]; then
    arr+=("${xcconfig_file}")


    echo xcconfig_file debug:${xcconfig_file}
elif [ "${build_config}" = "Release" ] && [ "${xcconfig_file:0-15}" != "_Debug.xcconfig" ];then
    arr+=("${xcconfig_file}")

	echo xcconfig_file release:${xcconfig_file}
fi

fi
done

for compile_xcconfig in "${arr[@]}"

do

echo -------$compile_xcconfig-------

cd ${project_path}
>${build_scheme}.xcconfig

cp ${prefix_path}/${compile_xcconfig} ${build_scheme}.xcconfig

echo "copy "${prefix_path}/${compile_xcconfig}" file OK! "

# store_code_serial=A

cat ${build_scheme}.xcconfig| while read line
do

if [[ ${line:0:10} = STORE_CODE ]]; then
	echo Store code is ${line:13:5}
	store_code_serial=${line:13:5}
fi

done

line=`tail -1 ${build_scheme}.xcconfig`

if [[ ${line:0:10} = STORE_CODE ]]; then
	echo Store code is ${line:13:5}
	store_code_serial=${line:13:5}
fi

Icon_resource_path=${project_path}/res/${build_scheme}/${store_code_serial}/Icon

Icon_detail_path=${project_path}/${build_scheme}/${build_scheme}/Images.xcassets/AppIcon.appiconset

echo Icon_detail_path is ${Icon_detail_path}
cd ${Icon_detail_path}
for Icon_file in `ls $Icon_detail_path`
do

	if [ -f ./${Icon_file} ] && [ "${Icon_file:0-4}" = ".png" ];then
		echo delete $Icon_file
		rm -rf ${Icon_file}
	fi

done

echo icon resource path is ${Icon_resource_path} 

cd ${Icon_resource_path}
for Icon_file in `ls $Icon_resource_path`
do
	if [ -f ./${Icon_file} ];then
		echo copy $Icon_file
		cp -f ${Icon_file} ${Icon_detail_path}
	fi

done

resource_path=${project_path}/res/${build_scheme}/${store_code_serial}
detail_path=${project_path}/${build_scheme}/${build_scheme}/Resources/Images
cd ${resource_path}
for resource_file in `ls $resource_path`
do
	if [ -f ./${resource_file} ];then
		echo copy $resource_file
		cp -f ${resource_file} ${detail_path}
	fi
done

cd $build_path
if [ -d ./${appdirname} ];then
	rm -rf ${appdirname}
fi

echo "remove "${appdirname}" OK!"

derivedDirectory=~/Library/Developer/Xcode/DerivedData/

cd $derivedDirectory

for derivedData in `ls $derivedDirectory`

do

if [ ${derivedData:0:16} = ${build_workspace:0:16} ];then
	rm -rf $derivedData
	echo remove deriveData $derivedData OK!
fi

done

if [ "$build_workspace" != "" ];then
	#编译workspace
	if [ "$build_scheme" = "" ];then
		echo "Error! Must provide a scheme by -s option together when using -w option to compile a workspace."
		exit 2
	fi

	build_cmd='xcodebuild -workspace '${build_workspace}' -scheme '${build_scheme}' -configuration '${build_config}' CONFIGURATION_BUILD_DIR='${compiled_path}' ONLY_ACTIVE_ARCH=NO '
	#${compile_option}'=1'

	echo 'build_cmd:' ${build_cmd}

	else
	#编译project
	build_cmd=${build_cmd}' -configuration '${build_config}
	if [ "$build_target" != "" ];then
	build_cmd=${build_cmd}' -target '${build_target}

	fi
fi

#编译工程
cd $project_path
$build_cmd || exit

#编译工程
cd $project_path
$build_cmd || exit

#进入build路径
cd $build_path

#app文件名称
appname=$(basename ./${appdirname}/*.app)
#通过app文件名获得工程target名字
target_name=$(echo $appname | awk -F. '{print $1}')
#app文件中Info.plist文件路径s
app_infoplist_path=${build_path}/${appdirname}/${appname}/Info.plist
#取版本号
bundleShortVersion=$(/usr/libexec/PlistBuddy -c "print CFBundleShortVersionString" ${app_infoplist_path})
#取build值
bundleVersion=$(/usr/libexec/PlistBuddy -c "print CFBundleVersion" ${app_infoplist_path})

bundleName=$(/usr/libexec/PlistBuddy -c "print CFBundleName" ${app_infoplist_path})

echo ${bundleName}

#IPA名称
ipa_name="${bundleName}"
# _${bundleShortVersion}_${build_config}${bundleVersion}_$(date +"%Y%m%d")"
echo ipa_name：$ipa_name
#xcrun打包

xcrun -sdk iphoneos PackageApplication -v ./${appdirname}/*.app -o ${build_path}/ipa-build/${ipa_name}.ipa || exit

output_directory=build_`date '+%Y%m%d'`

#进入build路径
cd ${project_path}

if [ ! -d ./${output_directory} ];then
	mkdir ${output_directory}
fi

cp ${build_path}/ipa-build/${ipa_name}.ipa ${project_path}/${output_directory}/${ipa_name}.ipa
echo "Copy ipa file successfully to the path ${project_path}/${output_directory}/${ipa_name}.ipa"

if [ "$output_path" != "" ];then
	cp ${build_path}/ipa-build/${ipa_name}.ipa $output_path/${ipa_name}.ipa
	echo "Copy ipa file successfully to the path $output_path/${ipa_name}.ipa"
fi
done
done